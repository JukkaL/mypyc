#!/usr/bin/env python3
"""Mypyc command-line tool.

Usage:

    $ mypyc foo.py
    $ python3 -c 'import foo'  # Uses compiled 'foo'
"""

import sys

sys.path.extend(['external/mypy', '.'])

import shutil
from typing import List

from mypy.errors import CompileError
from mypy.options import Options
from mypy.main import process_options
from mypy import build

from mypyc import emitmodule
from mypyc import buildc


def main() -> None:
    sources, options = process_options(sys.argv[1:])
    options.show_traceback = True
    if options.python_version[0] == 2:
        sys.exit('Python 2 not supported')
    if not options.strict_optional:
        sys.exit('Disabling strict optional checking not supported')
    # Needed to get types for all AST nodes
    options.dump_deps = True
    # TODO: Support incremental checking
    options.incremental = False

    assert len(sources) == 1

    module_names = [source.module for source in sources]

    try:
        ctext = emitmodule.compile_modules_to_c(
            sources=sources,
            module_names=module_names,
            options=options)
    except CompileError as e:
        for line in e.messages:
            print(line)
        sys.exit(1)

    for source in sources:
        module = source.module
        c_path = '%s.c' % module
        so_path = '%s.so' % module
        with open(c_path, 'w') as f:
            f.write(ctext)

        for mod in module_names:
            native_lib_path = buildc.build_c_extension(c_path, mod, preserve_setup=True)
            shutil.copy(native_lib_path, so_path)


if __name__ == '__main__':
    main()

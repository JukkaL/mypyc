[case testYieldBasic]
from typing import Iterable

def yield_three_times() -> Iterable:
    yield 1
    yield 2
    yield 3

[out]
def yield_three_times__gen.__mypyc_next_h__(self, type, value, traceback):
    self :: yield_three_times__gen
    type, value, traceback :: object
    r0 :: yield_three_times__env
    r1, r2 :: int
    r3 :: object
    r4 :: int
    r5 :: bool
    r6 :: None
    r7, r8 :: bool
    r9 :: None
    r10 :: int
    r11 :: object
    r12 :: int
    r13 :: bool
    r14 :: None
    r15, r16 :: bool
    r17 :: None
    r18 :: int
    r19 :: object
    r20 :: int
    r21 :: bool
    r22 :: None
    r23, r24 :: bool
    r25, r26 :: None
    r27 :: int
    r28, r29 :: bool
    r30 :: int
    r31 :: bool
    r32 :: int
    r33 :: bool
    r34 :: int
    r35 :: bool
    r36 :: int
    r37, r38 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L15
L1:
L2:
    r2 = 1
    r3 = box(int, r2)
    r4 = 1
    r0.__mypyc_next_label__ = r4; r5 = is_error
    return r3
L3:
    r6 = None
    r7 = type is not r6
    if r7 goto L4 else goto L5 :: bool
L4:
    raise_exception(type, value); r8 = 0
L5:
    r9 = None
L6:
    r10 = 2
    r11 = box(int, r10)
    r12 = 2
    r0.__mypyc_next_label__ = r12; r13 = is_error
    return r11
L7:
    r14 = None
    r15 = type is not r14
    if r15 goto L8 else goto L9 :: bool
L8:
    raise_exception(type, value); r16 = 0
L9:
    r17 = None
L10:
    r18 = 3
    r19 = box(int, r18)
    r20 = 3
    r0.__mypyc_next_label__ = r20; r21 = is_error
    return r19
L11:
    r22 = None
    r23 = type is not r22
    if r23 goto L12 else goto L13 :: bool
L12:
    raise_exception(type, value); r24 = 0
L13:
    r25 = None
    r26 = None
    r27 = -1
    r0.__mypyc_next_label__ = r27; r28 = is_error
L14:
    raise StopIteration(r26)
    unreachable
L15:
    r30 = 0
    r31 = r1 == r30 :: int
    if r31 goto L1 else goto L16 :: bool
L16:
    r32 = 1
    r33 = r1 == r32 :: int
    if r33 goto L3 else goto L17 :: bool
L17:
    r34 = 2
    r35 = r1 == r34 :: int
    if r35 goto L7 else goto L18 :: bool
L18:
    r36 = 3
    r37 = r1 == r36 :: int
    if r37 goto L11 else goto L19 :: bool
L19:
    raise StopIteration
    unreachable
def yield_three_times__gen.__next__(self):
    self :: yield_three_times__gen
    r0 :: None
    r1 :: object
L0:
    r0 = None
    r1 = yield_three_times__gen.__mypyc_next_h__(self, r0, r0, r0)
    return r1
def yield_three_times__gen.__iter__(self):
    self :: yield_three_times__gen
L0:
    return self
def yield_three_times__gen.throw(self, type, value, traceback):
    self :: yield_three_times__gen
    type, value, traceback :: object
    r0 :: None
    r1 :: object
L0:
    r0 = None
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_three_times__gen.__mypyc_next_h__(self, type, value, traceback)
    return r1
def yield_three_times():
    r0 :: yield_three_times__env
    r1 :: yield_three_times__gen
    r2 :: bool
    r3 :: int
    r4 :: bool
L0:
    r0 = yield_three_times__env()
    r1 = yield_three_times__gen()
    r1.__mypyc_env__ = r0; r2 = is_error
    r3 = 0
    r0.__mypyc_next_label__ = r3; r4 = is_error
    return r1

[case testYieldWhileLoop]
from typing import Generator

def yield_while_loop() -> Generator:
    i = 0
    while i < 5:
        yield i
        i += 1

[out]
def yield_while_loop__gen.__mypyc_next_h__(self, type, value, traceback):
    self :: yield_while_loop__gen
    type, value, traceback :: object
    r0 :: yield_while_loop__env
    r1, r2 :: int
    r3 :: bool
    r4, r5 :: int
    r6 :: bool
    r7 :: int
    r8 :: object
    r9 :: int
    r10 :: bool
    r11 :: None
    r12, r13 :: bool
    r14 :: None
    r15, r16, r17 :: int
    r18 :: bool
    r19 :: None
    r20 :: int
    r21, r22 :: bool
    r23 :: int
    r24 :: bool
    r25 :: int
    r26, r27 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L10
L1:
    r2 = 0
    r0.i = r2; r3 = is_error
L2:
    r4 = r0.i
    r5 = 5
    r6 = r4 < r5 :: int
    if r6 goto L3 else goto L8 :: bool
L3:
L4:
    r7 = r0.i
    r8 = box(int, r7)
    r9 = 1
    r0.__mypyc_next_label__ = r9; r10 = is_error
    return r8
L5:
    r11 = None
    r12 = type is not r11
    if r12 goto L6 else goto L7 :: bool
L6:
    raise_exception(type, value); r13 = 0
L7:
    r14 = None
    r15 = r0.i
    r16 = 1
    r17 = r15 += r16 :: int
    r0.i = r17; r18 = is_error
    goto L2
L8:
    r19 = None
    r20 = -1
    r0.__mypyc_next_label__ = r20; r21 = is_error
L9:
    raise StopIteration(r19)
    unreachable
L10:
    r23 = 0
    r24 = r1 == r23 :: int
    if r24 goto L1 else goto L11 :: bool
L11:
    r25 = 1
    r26 = r1 == r25 :: int
    if r26 goto L5 else goto L12 :: bool
L12:
    raise StopIteration
    unreachable
def yield_while_loop__gen.__next__(self):
    self :: yield_while_loop__gen
    r0 :: None
    r1 :: object
L0:
    r0 = None
    r1 = yield_while_loop__gen.__mypyc_next_h__(self, r0, r0, r0)
    return r1
def yield_while_loop__gen.__iter__(self):
    self :: yield_while_loop__gen
L0:
    return self
def yield_while_loop__gen.throw(self, type, value, traceback):
    self :: yield_while_loop__gen
    type, value, traceback :: object
    r0 :: None
    r1 :: object
L0:
    r0 = None
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_while_loop__gen.__mypyc_next_h__(self, type, value, traceback)
    return r1
def yield_while_loop():
    r0 :: yield_while_loop__env
    r1 :: yield_while_loop__gen
    r2 :: bool
    r3 :: int
    r4 :: bool
L0:
    r0 = yield_while_loop__env()
    r1 = yield_while_loop__gen()
    r1.__mypyc_env__ = r0; r2 = is_error
    r3 = 0
    r0.__mypyc_next_label__ = r3; r4 = is_error
    return r1

[case testYieldForLoops]
from typing import Iterable

def yield_for_loop_list() -> Iterable:
    l = [range(5)]
    for i in l:
        yield i

def yield_for_loop_dict() -> Iterable:
    d = {i: None for i in range(5)}
    for i in d:
        yield i

def yield_for_loop_range() -> Iterable:
    for i in range(5):
        yield i

[out]
def yield_for_loop_list__gen.__mypyc_next_h__(self, type, value, traceback):
    self :: yield_for_loop_list__gen
    type, value, traceback :: object
    r0 :: yield_for_loop_list__env
    r1, r2 :: int
    r3 :: object
    r4 :: str
    r5, r6, r7 :: object
    r8 :: list
    r9 :: bool
    r10 :: list
    r11 :: int
    r12, r13 :: bool
    r14 :: list
    r15, r16 :: int
    r17 :: bool
    r18 :: list
    r19 :: int
    r20, r21 :: object
    r22 :: bool
    r23 :: object
    r24 :: int
    r25 :: bool
    r26 :: None
    r27, r28 :: bool
    r29 :: None
    r30, r31, r32 :: int
    r33 :: bool
    r34 :: None
    r35 :: int
    r36, r37 :: bool
    r38 :: int
    r39 :: bool
    r40 :: int
    r41, r42 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L11
L1:
    r2 = 5
    r3 = builtins.module :: static
    r4 = unicode_0 :: static  ('range')
    r5 = getattr r3, r4
    r6 = box(int, r2)
    r7 = py_call(r5, r6)
    r8 = [r7]
    r0.l = r8; r9 = is_error
    r10 = r0.l
    r11 = 0
    r0.__mypyc_temp__0 = r10; r12 = is_error
    r0.__mypyc_temp__1 = r11; r13 = is_error
L2:
    r14 = r0.__mypyc_temp__0
    r15 = len r14 :: list
    r16 = r0.__mypyc_temp__1
    r17 = r16 < r15 :: int
    if r17 goto L3 else goto L9 :: bool
L3:
    r18 = r0.__mypyc_temp__0
    r19 = r0.__mypyc_temp__1
    r20 = r18[r19] :: list
    r21 = cast(object, r20)
    r0.i = r21; r22 = is_error
L4:
    r23 = r0.i
    r24 = 1
    r0.__mypyc_next_label__ = r24; r25 = is_error
    return r23
L5:
    r26 = None
    r27 = type is not r26
    if r27 goto L6 else goto L7 :: bool
L6:
    raise_exception(type, value); r28 = 0
L7:
    r29 = None
L8:
    r30 = r0.__mypyc_temp__1
    r31 = 1
    r32 = r30 + r31 :: int
    r0.__mypyc_temp__1 = r32; r33 = is_error
    goto L2
L9:
    r34 = None
    r35 = -1
    r0.__mypyc_next_label__ = r35; r36 = is_error
L10:
    raise StopIteration(r34)
    unreachable
L11:
    r38 = 0
    r39 = r1 == r38 :: int
    if r39 goto L1 else goto L12 :: bool
L12:
    r40 = 1
    r41 = r1 == r40 :: int
    if r41 goto L5 else goto L13 :: bool
L13:
    raise StopIteration
    unreachable
def yield_for_loop_list__gen.__next__(self):
    self :: yield_for_loop_list__gen
    r0 :: None
    r1 :: object
L0:
    r0 = None
    r1 = yield_for_loop_list__gen.__mypyc_next_h__(self, r0, r0, r0)
    return r1
def yield_for_loop_list__gen.__iter__(self):
    self :: yield_for_loop_list__gen
L0:
    return self
def yield_for_loop_list__gen.throw(self, type, value, traceback):
    self :: yield_for_loop_list__gen
    type, value, traceback :: object
    r0 :: None
    r1 :: object
L0:
    r0 = None
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_for_loop_list__gen.__mypyc_next_h__(self, type, value, traceback)
    return r1
def yield_for_loop_list():
    r0 :: yield_for_loop_list__env
    r1 :: yield_for_loop_list__gen
    r2 :: bool
    r3 :: int
    r4 :: bool
L0:
    r0 = yield_for_loop_list__env()
    r1 = yield_for_loop_list__gen()
    r1.__mypyc_env__ = r0; r2 = is_error
    r3 = 0
    r0.__mypyc_next_label__ = r3; r4 = is_error
    return r1
def yield_for_loop_dict__gen.__mypyc_next_h__(self, type, value, traceback):
    self :: yield_for_loop_dict__gen
    type, value, traceback :: object
    r0 :: yield_for_loop_dict__env
    r1 :: int
    r2 :: dict
    r3 :: int
    r4 :: bool
    r5 :: int
    r6 :: bool
    r7, r8 :: int
    r9 :: bool
    r10 :: int
    r11 :: None
    r12 :: object
    r13 :: bool
    r14, r15, r16 :: int
    r17, r18 :: bool
    r19 :: dict
    r20 :: object
    r21, r22 :: bool
    r23, r24 :: object
    r25 :: int
    r26 :: bool
    r27 :: int
    r28 :: object
    r29 :: int
    r30 :: bool
    r31 :: None
    r32, r33 :: bool
    r34 :: None
    r35 :: bool
    r36 :: None
    r37 :: int
    r38, r39 :: bool
    r40 :: int
    r41 :: bool
    r42 :: int
    r43, r44 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L15
L1:
    r2 = {}
    r3 = 5
    r0.__mypyc_temp__2 = r3; r4 = is_error
    r5 = 0
    r0.i = r5; r6 = is_error
L2:
    r7 = r0.i
    r8 = r0.__mypyc_temp__2
    r9 = r7 < r8 :: int
    if r9 goto L3 else goto L5 :: bool
L3:
    r10 = r0.i
    r11 = None
    r12 = box(int, r10)
    r13 = r2.__setitem__(r12, r11) :: dict
L4:
    r14 = r0.i
    r15 = 1
    r16 = r14 + r15 :: int
    r0.i = r16; r17 = is_error
    goto L2
L5:
    r0.d = r2; r18 = is_error
    r19 = r0.d
    r20 = iter r19 :: object
    r0.__mypyc_temp__3 = r19; r21 = is_error
    r0.__mypyc_temp__4 = r20; r22 = is_error
L6:
    r23 = r0.__mypyc_temp__4
    r24 = next r23 :: object
    if is_error(r24) goto L12 else goto L7
L7:
    r25 = unbox(int, r24)
    r0.i = r25; r26 = is_error
L8:
    r27 = r0.i
    r28 = box(int, r27)
    r29 = 1
    r0.__mypyc_next_label__ = r29; r30 = is_error
    return r28
L9:
    r31 = None
    r32 = type is not r31
    if r32 goto L10 else goto L11 :: bool
L10:
    raise_exception(type, value); r33 = 0
L11:
    r34 = None
    goto L6
L12:
    r35 = no_err_occurred
L13:
    r36 = None
    r37 = -1
    r0.__mypyc_next_label__ = r37; r38 = is_error
L14:
    raise StopIteration(r36)
    unreachable
L15:
    r40 = 0
    r41 = r1 == r40 :: int
    if r41 goto L1 else goto L16 :: bool
L16:
    r42 = 1
    r43 = r1 == r42 :: int
    if r43 goto L9 else goto L17 :: bool
L17:
    raise StopIteration
    unreachable
def yield_for_loop_dict__gen.__next__(self):
    self :: yield_for_loop_dict__gen
    r0 :: None
    r1 :: object
L0:
    r0 = None
    r1 = yield_for_loop_dict__gen.__mypyc_next_h__(self, r0, r0, r0)
    return r1
def yield_for_loop_dict__gen.__iter__(self):
    self :: yield_for_loop_dict__gen
L0:
    return self
def yield_for_loop_dict__gen.throw(self, type, value, traceback):
    self :: yield_for_loop_dict__gen
    type, value, traceback :: object
    r0 :: None
    r1 :: object
L0:
    r0 = None
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_for_loop_dict__gen.__mypyc_next_h__(self, type, value, traceback)
    return r1
def yield_for_loop_dict():
    r0 :: yield_for_loop_dict__env
    r1 :: yield_for_loop_dict__gen
    r2 :: bool
    r3 :: int
    r4 :: bool
L0:
    r0 = yield_for_loop_dict__env()
    r1 = yield_for_loop_dict__gen()
    r1.__mypyc_env__ = r0; r2 = is_error
    r3 = 0
    r0.__mypyc_next_label__ = r3; r4 = is_error
    return r1
def yield_for_loop_range__gen.__mypyc_next_h__(self, type, value, traceback):
    self :: yield_for_loop_range__gen
    type, value, traceback :: object
    r0 :: yield_for_loop_range__env
    r1, r2 :: int
    r3 :: bool
    r4 :: int
    r5 :: bool
    r6, r7 :: int
    r8 :: bool
    r9 :: int
    r10 :: object
    r11 :: int
    r12 :: bool
    r13 :: None
    r14, r15 :: bool
    r16 :: None
    r17, r18, r19 :: int
    r20 :: bool
    r21 :: None
    r22 :: int
    r23, r24 :: bool
    r25 :: int
    r26 :: bool
    r27 :: int
    r28, r29 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L11
L1:
    r2 = 5
    r0.__mypyc_temp__5 = r2; r3 = is_error
    r4 = 0
    r0.i = r4; r5 = is_error
L2:
    r6 = r0.i
    r7 = r0.__mypyc_temp__5
    r8 = r6 < r7 :: int
    if r8 goto L3 else goto L9 :: bool
L3:
L4:
    r9 = r0.i
    r10 = box(int, r9)
    r11 = 1
    r0.__mypyc_next_label__ = r11; r12 = is_error
    return r10
L5:
    r13 = None
    r14 = type is not r13
    if r14 goto L6 else goto L7 :: bool
L6:
    raise_exception(type, value); r15 = 0
L7:
    r16 = None
L8:
    r17 = r0.i
    r18 = 1
    r19 = r17 + r18 :: int
    r0.i = r19; r20 = is_error
    goto L2
L9:
    r21 = None
    r22 = -1
    r0.__mypyc_next_label__ = r22; r23 = is_error
L10:
    raise StopIteration(r21)
    unreachable
L11:
    r25 = 0
    r26 = r1 == r25 :: int
    if r26 goto L1 else goto L12 :: bool
L12:
    r27 = 1
    r28 = r1 == r27 :: int
    if r28 goto L5 else goto L13 :: bool
L13:
    raise StopIteration
    unreachable
def yield_for_loop_range__gen.__next__(self):
    self :: yield_for_loop_range__gen
    r0 :: None
    r1 :: object
L0:
    r0 = None
    r1 = yield_for_loop_range__gen.__mypyc_next_h__(self, r0, r0, r0)
    return r1
def yield_for_loop_range__gen.__iter__(self):
    self :: yield_for_loop_range__gen
L0:
    return self
def yield_for_loop_range__gen.throw(self, type, value, traceback):
    self :: yield_for_loop_range__gen
    type, value, traceback :: object
    r0 :: None
    r1 :: object
L0:
    r0 = None
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_for_loop_range__gen.__mypyc_next_h__(self, type, value, traceback)
    return r1
def yield_for_loop_range():
    r0 :: yield_for_loop_range__env
    r1 :: yield_for_loop_range__gen
    r2 :: bool
    r3 :: int
    r4 :: bool
L0:
    r0 = yield_for_loop_range__env()
    r1 = yield_for_loop_range__gen()
    r1.__mypyc_env__ = r0; r2 = is_error
    r3 = 0
    r0.__mypyc_next_label__ = r3; r4 = is_error
    return r1

[case testYieldComplex]
from typing import Generator

def yield_with_vars(a: int, b: float) -> Generator[int, None, float]:
    x = 2
    while x < a:
        yield x
        x += 1
    return b

[out]
def yield_with_vars__gen.__mypyc_next_h__(self, type, value, traceback):
    self :: yield_with_vars__gen
    type, value, traceback :: object
    r0 :: yield_with_vars__env
    r1, r2 :: int
    r3 :: bool
    r4, r5 :: int
    r6 :: bool
    r7 :: int
    r8 :: object
    r9 :: int
    r10 :: bool
    r11 :: None
    r12, r13 :: bool
    r14 :: None
    r15, r16, r17 :: int
    r18 :: bool
    r19 :: float
    r20 :: int
    r21, r22 :: bool
    r23 :: int
    r24 :: bool
    r25 :: int
    r26, r27 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L10
L1:
    r2 = 2
    r0.x = r2; r3 = is_error
L2:
    r4 = r0.x
    r5 = r0.a
    r6 = r4 < r5 :: int
    if r6 goto L3 else goto L8 :: bool
L3:
L4:
    r7 = r0.x
    r8 = box(int, r7)
    r9 = 1
    r0.__mypyc_next_label__ = r9; r10 = is_error
    return r8
L5:
    r11 = None
    r12 = type is not r11
    if r12 goto L6 else goto L7 :: bool
L6:
    raise_exception(type, value); r13 = 0
L7:
    r14 = None
    r15 = r0.x
    r16 = 1
    r17 = r15 += r16 :: int
    r0.x = r17; r18 = is_error
    goto L2
L8:
    r19 = r0.b
    r20 = -1
    r0.__mypyc_next_label__ = r20; r21 = is_error
L9:
    raise StopIteration(r19)
    unreachable
L10:
    r23 = 0
    r24 = r1 == r23 :: int
    if r24 goto L1 else goto L11 :: bool
L11:
    r25 = 1
    r26 = r1 == r25 :: int
    if r26 goto L5 else goto L12 :: bool
L12:
    raise StopIteration
    unreachable
def yield_with_vars__gen.__next__(self):
    self :: yield_with_vars__gen
    r0 :: None
    r1 :: object
L0:
    r0 = None
    r1 = yield_with_vars__gen.__mypyc_next_h__(self, r0, r0, r0)
    return r1
def yield_with_vars__gen.__iter__(self):
    self :: yield_with_vars__gen
L0:
    return self
def yield_with_vars__gen.throw(self, type, value, traceback):
    self :: yield_with_vars__gen
    type, value, traceback :: object
    r0 :: None
    r1 :: object
L0:
    r0 = None
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_with_vars__gen.__mypyc_next_h__(self, type, value, traceback)
    return r1
def yield_with_vars(a, b):
    a :: int
    b :: float
    r0 :: yield_with_vars__env
    r1, r2 :: bool
    r3 :: yield_with_vars__gen
    r4 :: bool
    r5 :: int
    r6 :: bool
L0:
    r0 = yield_with_vars__env()
    r0.a = a; r1 = is_error
    r0.b = b; r2 = is_error
    r3 = yield_with_vars__gen()
    r3.__mypyc_env__ = r0; r4 = is_error
    r5 = 0
    r0.__mypyc_next_label__ = r5; r6 = is_error
    return r3

[case testYieldInsideMethod]
from typing import Iterable

class A(object):
    def generator(self) -> Iterable[int]:
        yield 0

[out]
def generator__gen.__mypyc_next_h__(self, type, value, traceback):
    self :: generator__gen
    type, value, traceback :: object
    r0 :: generator__env
    r1, r2 :: int
    r3 :: object
    r4 :: int
    r5 :: bool
    r6 :: None
    r7, r8 :: bool
    r9, r10 :: None
    r11 :: int
    r12, r13 :: bool
    r14 :: int
    r15 :: bool
    r16 :: int
    r17, r18 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L7
L1:
L2:
    r2 = 0
    r3 = box(int, r2)
    r4 = 1
    r0.__mypyc_next_label__ = r4; r5 = is_error
    return r3
L3:
    r6 = None
    r7 = type is not r6
    if r7 goto L4 else goto L5 :: bool
L4:
    raise_exception(type, value); r8 = 0
L5:
    r9 = None
    r10 = None
    r11 = -1
    r0.__mypyc_next_label__ = r11; r12 = is_error
L6:
    raise StopIteration(r10)
    unreachable
L7:
    r14 = 0
    r15 = r1 == r14 :: int
    if r15 goto L1 else goto L8 :: bool
L8:
    r16 = 1
    r17 = r1 == r16 :: int
    if r17 goto L3 else goto L9 :: bool
L9:
    raise StopIteration
    unreachable
def generator__gen.__next__(self):
    self :: generator__gen
    r0 :: None
    r1 :: object
L0:
    r0 = None
    r1 = generator__gen.__mypyc_next_h__(self, r0, r0, r0)
    return r1
def generator__gen.__iter__(self):
    self :: generator__gen
L0:
    return self
def generator__gen.throw(self, type, value, traceback):
    self :: generator__gen
    type, value, traceback :: object
    r0 :: None
    r1 :: object
L0:
    r0 = None
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = generator__gen.__mypyc_next_h__(self, type, value, traceback)
    return r1
def A.generator(self):
    self :: A
    r0 :: generator__env
    r1 :: bool
    r2 :: generator__gen
    r3 :: bool
    r4 :: int
    r5 :: bool
L0:
    r0 = generator__env()
    r0.self = self; r1 = is_error
    r2 = generator__gen()
    r2.__mypyc_env__ = r0; r3 = is_error
    r4 = 0
    r0.__mypyc_next_label__ = r4; r5 = is_error
    return r2

[case testYieldIfElse]
from typing import Generator

def generator(a: int) -> Generator:
    if a < 5:
        yield a
    else:
        return

[out]
def generator__gen.__mypyc_next_h__(self, type, value, traceback):
    self :: generator__gen
    type, value, traceback :: object
    r0 :: generator__env
    r1, r2, r3 :: int
    r4 :: bool
    r5 :: int
    r6 :: object
    r7 :: int
    r8 :: bool
    r9 :: None
    r10, r11 :: bool
    r12, r13 :: None
    r14 :: int
    r15, r16 :: bool
    r17 :: None
    r18 :: int
    r19, r20 :: bool
    r21 :: int
    r22 :: bool
    r23 :: int
    r24, r25 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L11
L1:
    r2 = r0.a
    r3 = 5
    r4 = r2 < r3 :: int
    if r4 goto L2 else goto L7 :: bool
L2:
L3:
    r5 = r0.a
    r6 = box(int, r5)
    r7 = 1
    r0.__mypyc_next_label__ = r7; r8 = is_error
    return r6
L4:
    r9 = None
    r10 = type is not r9
    if r10 goto L5 else goto L6 :: bool
L5:
    raise_exception(type, value); r11 = 0
L6:
    r12 = None
    goto L9
L7:
    r13 = None
    r14 = -1
    r0.__mypyc_next_label__ = r14; r15 = is_error
L8:
    raise StopIteration(r13)
    unreachable
L9:
    r17 = None
    r18 = -1
    r0.__mypyc_next_label__ = r18; r19 = is_error
L10:
    raise StopIteration(r17)
    unreachable
L11:
    r21 = 0
    r22 = r1 == r21 :: int
    if r22 goto L1 else goto L12 :: bool
L12:
    r23 = 1
    r24 = r1 == r23 :: int
    if r24 goto L4 else goto L13 :: bool
L13:
    raise StopIteration
    unreachable
def generator__gen.__next__(self):
    self :: generator__gen
    r0 :: None
    r1 :: object
L0:
    r0 = None
    r1 = generator__gen.__mypyc_next_h__(self, r0, r0, r0)
    return r1
def generator__gen.__iter__(self):
    self :: generator__gen
L0:
    return self
def generator__gen.throw(self, type, value, traceback):
    self :: generator__gen
    type, value, traceback :: object
    r0 :: None
    r1 :: object
L0:
    r0 = None
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = generator__gen.__mypyc_next_h__(self, type, value, traceback)
    return r1
def generator(a):
    a :: int
    r0 :: generator__env
    r1 :: bool
    r2 :: generator__gen
    r3 :: bool
    r4 :: int
    r5 :: bool
L0:
    r0 = generator__env()
    r0.a = a; r1 = is_error
    r2 = generator__gen()
    r2.__mypyc_env__ = r0; r3 = is_error
    r4 = 0
    r0.__mypyc_next_label__ = r4; r5 = is_error
    return r2

[case testYieldNested]
from typing import Callable, Generator

def generator(a: int) -> Generator:
    def normal(x: int) -> int:
        return a + x
    yield normal(1)

def normal(a: int) -> Callable:
    def generator(x: int) -> Generator:
        yield a
        yield x
    return generator

def triple() -> Callable:
    def generator() -> Generator:
        x = 0
        def inner() -> int:
            x += 1
            return x
        while x < 3:
            yield inner()
    return generator

[out]
def normal_generator_obj.__call__(self, x):
    self :: normal_generator_obj
    x :: int
    r0 :: generator__env
    r1, r2 :: int
L0:
    r0 = self.__mypyc_env__
    r1 = r0.a
    r2 = r1 + x :: int
    return r2
def generator__gen.__mypyc_next_h__(self, type, value, traceback):
    self :: generator__gen
    type, value, traceback :: object
    r0 :: generator__env
    r1 :: int
    r2 :: normal_generator_obj
    r3, r4 :: bool
    r5 :: int
    r6, r7, r8 :: object
    r9 :: int
    r10 :: object
    r11 :: int
    r12 :: bool
    r13 :: None
    r14, r15 :: bool
    r16, r17 :: None
    r18 :: int
    r19, r20 :: bool
    r21 :: int
    r22 :: bool
    r23 :: int
    r24, r25 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L7
L1:
    r2 = normal_generator_obj()
    r2.__mypyc_env__ = r0; r3 = is_error
    r0.normal = r2; r4 = is_error
L2:
    r5 = 1
    r6 = r0.normal
    r7 = box(int, r5)
    r8 = py_call(r6, r7)
    r9 = unbox(int, r8)
    r10 = box(int, r9)
    r11 = 1
    r0.__mypyc_next_label__ = r11; r12 = is_error
    return r10
L3:
    r13 = None
    r14 = type is not r13
    if r14 goto L4 else goto L5 :: bool
L4:
    raise_exception(type, value); r15 = 0
L5:
    r16 = None
    r17 = None
    r18 = -1
    r0.__mypyc_next_label__ = r18; r19 = is_error
L6:
    raise StopIteration(r17)
    unreachable
L7:
    r21 = 0
    r22 = r1 == r21 :: int
    if r22 goto L1 else goto L8 :: bool
L8:
    r23 = 1
    r24 = r1 == r23 :: int
    if r24 goto L3 else goto L9 :: bool
L9:
    raise StopIteration
    unreachable
def generator__gen.__next__(self):
    self :: generator__gen
    r0 :: None
    r1 :: object
L0:
    r0 = None
    r1 = generator__gen.__mypyc_next_h__(self, r0, r0, r0)
    return r1
def generator__gen.__iter__(self):
    self :: generator__gen
L0:
    return self
def generator__gen.throw(self, type, value, traceback):
    self :: generator__gen
    type, value, traceback :: object
    r0 :: None
    r1 :: object
L0:
    r0 = None
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = generator__gen.__mypyc_next_h__(self, type, value, traceback)
    return r1
def generator(a):
    a :: int
    r0 :: generator__env
    r1 :: bool
    r2 :: generator__gen
    r3 :: bool
    r4 :: int
    r5 :: bool
L0:
    r0 = generator__env()
    r0.a = a; r1 = is_error
    r2 = generator__gen()
    r2.__mypyc_env__ = r0; r3 = is_error
    r4 = 0
    r0.__mypyc_next_label__ = r4; r5 = is_error
    return r2
def generator_normal_gen.__mypyc_next_h__(self, type, value, traceback):
    self :: generator_normal_gen
    type, value, traceback :: object
    r0 :: generator_normal_env
    r1 :: int
    r2 :: normal__env
    r3 :: int
    r4 :: object
    r5 :: int
    r6 :: bool
    r7 :: None
    r8, r9 :: bool
    r10 :: None
    r11 :: int
    r12 :: object
    r13 :: int
    r14 :: bool
    r15 :: None
    r16, r17 :: bool
    r18, r19 :: None
    r20 :: int
    r21, r22 :: bool
    r23 :: int
    r24 :: bool
    r25 :: int
    r26 :: bool
    r27 :: int
    r28, r29 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    r2 = r0.__mypyc_env__
    goto L11
L1:
L2:
    r3 = r2.a
    r4 = box(int, r3)
    r5 = 1
    r0.__mypyc_next_label__ = r5; r6 = is_error
    return r4
L3:
    r7 = None
    r8 = type is not r7
    if r8 goto L4 else goto L5 :: bool
L4:
    raise_exception(type, value); r9 = 0
L5:
    r10 = None
L6:
    r11 = r0.x
    r12 = box(int, r11)
    r13 = 2
    r0.__mypyc_next_label__ = r13; r14 = is_error
    return r12
L7:
    r15 = None
    r16 = type is not r15
    if r16 goto L8 else goto L9 :: bool
L8:
    raise_exception(type, value); r17 = 0
L9:
    r18 = None
    r19 = None
    r20 = -1
    r0.__mypyc_next_label__ = r20; r21 = is_error
L10:
    raise StopIteration(r19)
    unreachable
L11:
    r23 = 0
    r24 = r1 == r23 :: int
    if r24 goto L1 else goto L12 :: bool
L12:
    r25 = 1
    r26 = r1 == r25 :: int
    if r26 goto L3 else goto L13 :: bool
L13:
    r27 = 2
    r28 = r1 == r27 :: int
    if r28 goto L7 else goto L14 :: bool
L14:
    raise StopIteration
    unreachable
def generator_normal_gen.__next__(self):
    self :: generator_normal_gen
    r0 :: None
    r1 :: object
L0:
    r0 = None
    r1 = generator_normal_gen.__mypyc_next_h__(self, r0, r0, r0)
    return r1
def generator_normal_gen.__iter__(self):
    self :: generator_normal_gen
L0:
    return self
def generator_normal_gen.throw(self, type, value, traceback):
    self :: generator_normal_gen
    type, value, traceback :: object
    r0 :: None
    r1 :: object
L0:
    r0 = None
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = generator_normal_gen.__mypyc_next_h__(self, type, value, traceback)
    return r1
def generator_normal_obj.__call__(self, x):
    self :: generator_normal_obj
    x :: int
    r0 :: normal__env
    r1 :: generator_normal_env
    r2, r3 :: bool
    r4 :: generator_normal_gen
    r5 :: bool
    r6 :: int
    r7 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = generator_normal_env()
    r1.__mypyc_env__ = r0; r2 = is_error
    r1.x = x; r3 = is_error
    r4 = generator_normal_gen()
    r4.__mypyc_env__ = r1; r5 = is_error
    r6 = 0
    r1.__mypyc_next_label__ = r6; r7 = is_error
    return r4
def normal(a):
    a :: int
    r0 :: normal__env
    r1 :: bool
    r2 :: generator_normal_obj
    r3 :: bool
    generator :: object
L0:
    r0 = normal__env()
    r0.a = a; r1 = is_error
    r2 = generator_normal_obj()
    r2.__mypyc_env__ = r0; r3 = is_error
    generator = r2
    return generator
def inner_triple_generator_obj.__call__(self):
    self :: inner_triple_generator_obj
    r0 :: generator_triple_env
    r1 :: triple__env
    r2, r3, r4 :: int
    r5 :: bool
    r6 :: int
L0:
    r0 = self.__mypyc_env__
    r1 = r0.__mypyc_env__
    r2 = r0.x
    r3 = 1
    r4 = r2 += r3 :: int
    r0.x = r4; r5 = is_error
    r6 = r0.x
    return r6
def generator_triple_gen.__mypyc_next_h__(self, type, value, traceback):
    self :: generator_triple_gen
    type, value, traceback :: object
    r0 :: generator_triple_env
    r1 :: int
    r2 :: triple__env
    r3 :: int
    r4 :: bool
    r5 :: inner_triple_generator_obj
    r6, r7 :: bool
    r8, r9 :: int
    r10 :: bool
    r11, r12 :: object
    r13 :: int
    r14 :: object
    r15 :: int
    r16 :: bool
    r17 :: None
    r18, r19 :: bool
    r20, r21 :: None
    r22 :: int
    r23, r24 :: bool
    r25 :: int
    r26 :: bool
    r27 :: int
    r28, r29 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    r2 = r0.__mypyc_env__
    goto L10
L1:
    r3 = 0
    r0.x = r3; r4 = is_error
    r5 = inner_triple_generator_obj()
    r5.__mypyc_env__ = r0; r6 = is_error
    r0.inner = r5; r7 = is_error
L2:
    r8 = r0.x
    r9 = 3
    r10 = r8 < r9 :: int
    if r10 goto L3 else goto L8 :: bool
L3:
L4:
    r11 = r0.inner
    r12 = py_call(r11)
    r13 = unbox(int, r12)
    r14 = box(int, r13)
    r15 = 1
    r0.__mypyc_next_label__ = r15; r16 = is_error
    return r14
L5:
    r17 = None
    r18 = type is not r17
    if r18 goto L6 else goto L7 :: bool
L6:
    raise_exception(type, value); r19 = 0
L7:
    r20 = None
    goto L2
L8:
    r21 = None
    r22 = -1
    r0.__mypyc_next_label__ = r22; r23 = is_error
L9:
    raise StopIteration(r21)
    unreachable
L10:
    r25 = 0
    r26 = r1 == r25 :: int
    if r26 goto L1 else goto L11 :: bool
L11:
    r27 = 1
    r28 = r1 == r27 :: int
    if r28 goto L5 else goto L12 :: bool
L12:
    raise StopIteration
    unreachable
def generator_triple_gen.__next__(self):
    self :: generator_triple_gen
    r0 :: None
    r1 :: object
L0:
    r0 = None
    r1 = generator_triple_gen.__mypyc_next_h__(self, r0, r0, r0)
    return r1
def generator_triple_gen.__iter__(self):
    self :: generator_triple_gen
L0:
    return self
def generator_triple_gen.throw(self, type, value, traceback):
    self :: generator_triple_gen
    type, value, traceback :: object
    r0 :: None
    r1 :: object
L0:
    r0 = None
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = generator_triple_gen.__mypyc_next_h__(self, type, value, traceback)
    return r1
def generator_triple_obj.__call__(self):
    self :: generator_triple_obj
    r0 :: triple__env
    r1 :: generator_triple_env
    r2 :: bool
    r3 :: generator_triple_gen
    r4 :: bool
    r5 :: int
    r6 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = generator_triple_env()
    r1.__mypyc_env__ = r0; r2 = is_error
    r3 = generator_triple_gen()
    r3.__mypyc_env__ = r1; r4 = is_error
    r5 = 0
    r1.__mypyc_next_label__ = r5; r6 = is_error
    return r3
def triple():
    r0 :: triple__env
    r1 :: generator_triple_obj
    r2 :: bool
    generator :: object
L0:
    r0 = triple__env()
    r1 = generator_triple_obj()
    r1.__mypyc_env__ = r0; r2 = is_error
    generator = r1
    return generator

[case testYieldTryFinally]
from typing import Generator

def yield_try_finally() -> Generator[int, None, str]:
    try:
        yield 1
        yield 2
        return 'lol'
    except Exception:
        raise
    finally:
        print('goodbye!')

[out]
def yield_try_finally__gen.__mypyc_next_h__(self, type, value, traceback):
    self :: yield_try_finally__gen
    type, value, traceback :: object
    r0 :: yield_try_finally__env
    r1, r2 :: int
    r3 :: object
    r4 :: int
    r5 :: bool
    r6 :: None
    r7, r8 :: bool
    r9 :: None
    r10 :: int
    r11 :: object
    r12 :: int
    r13 :: bool
    r14 :: None
    r15, r16 :: bool
    r17 :: None
    r18 :: str
    r19 :: object
    r20 :: tuple[object, object, object]
    r21 :: object
    r22 :: str
    r23 :: object
    r24, r25, r26, r27 :: bool
    r28 :: tuple[object, object, object]
    r29 :: object
    r30 :: tuple[object, object, object]
    r31 :: object
    r32 :: tuple[object, object, object]
    r33 :: str
    r34 :: object
    r35 :: str
    r36, r37 :: object
    r38 :: None
    r39 :: bool
    r40 :: int
    r41, r42, r43 :: bool
    r44 :: None
    r45 :: int
    r46, r47 :: bool
    r48 :: int
    r49 :: bool
    r50 :: int
    r51 :: bool
    r52 :: int
    r53, r54 :: bool
L0:
    r0 = self.__mypyc_env__
    r1 = r0.__mypyc_next_label__
    goto L33
L1:
L2:
L3:
L4:
    r2 = 1
    r3 = box(int, r2)
    r4 = 1
    r0.__mypyc_next_label__ = r4; r5 = is_error
    return r3
L5:
    r6 = None
    r7 = type is not r6
    if r7 goto L6 else goto L7 :: bool
L6:
    raise_exception(type, value); r8 = 0
L7:
    r9 = None
L8:
    r10 = 2
    r11 = box(int, r10)
    r12 = 2
    r0.__mypyc_next_label__ = r12; r13 = is_error
    return r11
L9:
    r14 = None
    r15 = type is not r14
    if r15 goto L10 else goto L11 :: bool
L10:
    raise_exception(type, value); r16 = 0
L11:
    r17 = None
    r18 = unicode_0 :: static  ('lol')
    r19 = r18
    goto L19
L12: (handler for L10, L11, L3, L4, L5, L6, L7, L8, L9)
    r20 = error_catch
    r21 = builtins.module :: static
    r22 = unicode_1 :: static  ('Exception')
    r23 = getattr r21, r22
    r24 = exc_matches r23
    if r24 goto L13 else goto L14 :: bool
L13:
    reraise_exc; r25 = 0
    unreachable
L14:
    reraise_exc; r26 = 0
    unreachable
L15:
    restore_exc_info r20
    goto L17
L16: (handler for L12, L13, L14)
    restore_exc_info r20
    r27 = keep_propagating
    unreachable
L17:
L18:
    r29 = <error> :: object
    r19 = r29
L19:
    r30 = <error> :: tuple[object, object, object]
    r28 = r30
    goto L21
L20: (handler for L15, L16, L17, L2)
    r31 = <error> :: object
    r19 = r31
    r32 = error_catch
    r28 = r32
L21:
    r33 = unicode_2 :: static  ('goodbye!')
    r34 = builtins.module :: static
    r35 = unicode_3 :: static  ('print')
    r36 = getattr r34, r35
    r37 = py_call(r36, r33)
    r38 = cast(None, r37)
    if is_error(r28) goto L23 else goto L22
L22:
    reraise_exc; r39 = 0
    unreachable
L23:
    if is_error(r19) goto L26 else goto L24
L24:
    r40 = -1
    r0.__mypyc_next_label__ = r40; r41 = is_error
L25:
    raise StopIteration(r19)
    unreachable
L26:
    goto L31
L27: (handler for L21, L22)
    if is_error(r19) goto L28 else goto L28
L28:
    if is_error(r28) goto L30 else goto L29
L29:
    restore_exc_info r28
L30:
    r43 = keep_propagating
    unreachable
L31:
    r44 = None
    r45 = -1
    r0.__mypyc_next_label__ = r45; r46 = is_error
L32:
    raise StopIteration(r44)
    unreachable
L33:
    r48 = 0
    r49 = r1 == r48 :: int
    if r49 goto L1 else goto L34 :: bool
L34:
    r50 = 1
    r51 = r1 == r50 :: int
    if r51 goto L5 else goto L35 :: bool
L35:
    r52 = 2
    r53 = r1 == r52 :: int
    if r53 goto L9 else goto L36 :: bool
L36:
    raise StopIteration
    unreachable
def yield_try_finally__gen.__next__(self):
    self :: yield_try_finally__gen
    r0 :: None
    r1 :: object
L0:
    r0 = None
    r1 = yield_try_finally__gen.__mypyc_next_h__(self, r0, r0, r0)
    return r1
def yield_try_finally__gen.__iter__(self):
    self :: yield_try_finally__gen
L0:
    return self
def yield_try_finally__gen.throw(self, type, value, traceback):
    self :: yield_try_finally__gen
    type, value, traceback :: object
    r0 :: None
    r1 :: object
L0:
    r0 = None
    if is_error(value) goto L1 else goto L2
L1:
    value = r0
L2:
    if is_error(traceback) goto L3 else goto L4
L3:
    traceback = r0
L4:
    r1 = yield_try_finally__gen.__mypyc_next_h__(self, type, value, traceback)
    return r1
def yield_try_finally():
    r0 :: yield_try_finally__env
    r1 :: yield_try_finally__gen
    r2 :: bool
    r3 :: int
    r4 :: bool
L0:
    r0 = yield_try_finally__env()
    r1 = yield_try_finally__gen()
    r1.__mypyc_env__ = r0; r2 = is_error
    r3 = 0
    r0.__mypyc_next_label__ = r3; r4 = is_error
    return r1
